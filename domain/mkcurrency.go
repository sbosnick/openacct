// Copyright Steven Bosnick 2016. All rights reserved.
// Use of this source code is governed by the GNU General Public License version 3.
// See the file COPYING for your rights under that license.

// +build ignore

package main

import (
	"encoding/xml"
	"fmt"
	"os"
	"strconv"
	"text/template"
)

var generatedTemplate = `// Copyright Steven Bosnick 2016. All rights reserved.
// Use of this source code is governed by the GNU General Public License version 3.
// See the file COPYING for your rights under that license.

// This file is generated by mkcurrency.go from ISO4217-TABL-a1.xml.
// DO NOT EDIT THIS FILE DIRECTLY.
// To regenerate this file run "go generate"

package domain

const (
	XXX Currency = iota // The codes assigned for transactions where no currency is involved
	{{- range $key, $value := .}}{{if (ne $key "XXX") }}
	{{ $key }}		    // {{ $value.Name }}
	{{- end}}
	{{- end}}
)
`

type CurrencyName struct {
	Name   string `xml:",chardata"`
	IsFund bool   `xml:",attr"`
}

type CurrencyEntry struct {
	XMLName    xml.Name `xml:"CcyNtry"`
	CtryNm     string
	CcyNm      CurrencyName
	Ccy        string
	CcyNbr     int
	CcyMnrUnts string
}

type ISO4217 struct {
	XMLName xml.Name        `xml:"ISO_4217"`
	Pblshd  string          `xml:",attr"`
	CcyTbl  []CurrencyEntry `xml:"CcyTbl>CcyNtry"`
}

type currencyInfo struct {
	Name       string
	Number     int
	MinorUnits int
}

func exitIfError(err error) {
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}

func readCurrencies() ISO4217 {
	file, err := os.Open("ISO4217-tabl-a1.xml")
	exitIfError(err)
	defer file.Close()

	var currencies ISO4217
	err = xml.NewDecoder(file).Decode(&currencies)
	exitIfError(err)

	return currencies
}

func mapCurrencies(currencies ISO4217) map[string]currencyInfo {
	currencyMap := make(map[string]currencyInfo)
	for _, entry := range currencies.CcyTbl {
		if entry.Ccy == "" || entry.CcyNm.IsFund {
			continue
		}
		minorUnits, err := strconv.Atoi(entry.CcyMnrUnts)
		if err != nil {
			minorUnits = 0
		}
		currencyMap[entry.Ccy] =
			currencyInfo{entry.CcyNm.Name, entry.CcyNbr, minorUnits}
	}

	return currencyMap
}

func main() {
	currencyMap := mapCurrencies(readCurrencies())

	t, err := template.New("generator").Parse(generatedTemplate)
	exitIfError(err)

	out, err := os.Create("currencylists.go")
	exitIfError(err)
	defer out.Close()

	t.Execute(out, currencyMap)
}
