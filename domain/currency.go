// Copyright Steven Bosnick 2016. All rights reserved.
// Use of this source code is governed by the GNU General Public License version 3.
// See the file COPYING for your rights under that license.

//go:generate go run mkcurrency.go

package domain

import (
	"fmt"
	"strings"
)

var invalidCurrencyErrorFormat string = "Invalid currency value: %s."

// Currency provides a representation of ISO 4217 currency values.
type Currency uint

type InvalidCurrencyError struct {
	invalidValue string
}

func (e *InvalidCurrencyError) Error() string {
	return fmt.Sprintf(invalidCurrencyErrorFormat, e.invalidValue)
}

type currencyInfo struct {
	symbol     string
	name       string
	number     int
	minorUnits int
}

// String returns the string representation of the Currency.
func (c Currency) String() string {
	if int(c*3+3) > len(currencyStringsBlock) {
		c = 0
	}

	// This slice calculation relies on the manner in which
	// currencyStringBlock is generated by mkcurrency.go. The string block
	// is generated in the same order as the Currency constants and each
	// element of the block is 3 uppercase characters from [A-Z].
	return currencyStringsBlock[c*3 : c*3+3]
}

// ParseCurrency returns the Currency for a given string representations.
func ParseCurrency(value string) (Currency, error) {
	if len(value) != 3 {
		return XXX, &InvalidCurrencyError{value}
	}

	// This loop relies on the manner in which currencyStringBlock
	// is generated by mkcurrency.go. The string block is generated in the
	// same order as the Currency constants and each element of the block
	// is 3 uppercase charaters from [A-Z]. This loop does a linear scan
	// looking for a match. If this ends up being a perfomance problem
	// sort.Search() may be an option.
	for i := 0; i+3 <= len(currencyStringsBlock); i += 3 {
		if strings.EqualFold(value, currencyStringsBlock[i:i+3]) {
			return Currency(i / 3), nil
		}
	}

	return XXX, &InvalidCurrencyError{value}
}

// IsCurrency valdiates the string representation as a Currency
func IsCurrency(value string) bool {
	_, err := ParseCurrency(value)
	return err == nil
}
